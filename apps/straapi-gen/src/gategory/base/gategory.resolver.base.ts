/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gategory } from "./Gategory";
import { GategoryCountArgs } from "./GategoryCountArgs";
import { GategoryFindManyArgs } from "./GategoryFindManyArgs";
import { GategoryFindUniqueArgs } from "./GategoryFindUniqueArgs";
import { CreateGategoryArgs } from "./CreateGategoryArgs";
import { UpdateGategoryArgs } from "./UpdateGategoryArgs";
import { DeleteGategoryArgs } from "./DeleteGategoryArgs";
import { GategoryService } from "../gategory.service";
@graphql.Resolver(() => Gategory)
export class GategoryResolverBase {
  constructor(protected readonly service: GategoryService) {}

  async _gategoriesMeta(
    @graphql.Args() args: GategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gategory])
  async gategories(
    @graphql.Args() args: GategoryFindManyArgs
  ): Promise<Gategory[]> {
    return this.service.gategories(args);
  }

  @graphql.Query(() => Gategory, { nullable: true })
  async gategory(
    @graphql.Args() args: GategoryFindUniqueArgs
  ): Promise<Gategory | null> {
    const result = await this.service.gategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gategory)
  async createGategory(
    @graphql.Args() args: CreateGategoryArgs
  ): Promise<Gategory> {
    return await this.service.createGategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Gategory)
  async updateGategory(
    @graphql.Args() args: UpdateGategoryArgs
  ): Promise<Gategory | null> {
    try {
      return await this.service.updateGategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gategory)
  async deleteGategory(
    @graphql.Args() args: DeleteGategoryArgs
  ): Promise<Gategory | null> {
    try {
      return await this.service.deleteGategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
