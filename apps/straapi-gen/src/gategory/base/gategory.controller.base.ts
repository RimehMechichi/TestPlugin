/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GategoryService } from "../gategory.service";
import { GategoryCreateInput } from "./GategoryCreateInput";
import { Gategory } from "./Gategory";
import { GategoryFindManyArgs } from "./GategoryFindManyArgs";
import { GategoryWhereUniqueInput } from "./GategoryWhereUniqueInput";
import { GategoryUpdateInput } from "./GategoryUpdateInput";

export class GategoryControllerBase {
  constructor(protected readonly service: GategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gategory })
  async createGategory(
    @common.Body() data: GategoryCreateInput
  ): Promise<Gategory> {
    return await this.service.createGategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gategory] })
  @ApiNestedQuery(GategoryFindManyArgs)
  async gategories(@common.Req() request: Request): Promise<Gategory[]> {
    const args = plainToClass(GategoryFindManyArgs, request.query);
    return this.service.gategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gategory(
    @common.Param() params: GategoryWhereUniqueInput
  ): Promise<Gategory | null> {
    const result = await this.service.gategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGategory(
    @common.Param() params: GategoryWhereUniqueInput,
    @common.Body() data: GategoryUpdateInput
  ): Promise<Gategory | null> {
    try {
      return await this.service.updateGategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGategory(
    @common.Param() params: GategoryWhereUniqueInput
  ): Promise<Gategory | null> {
    try {
      return await this.service.deleteGategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
